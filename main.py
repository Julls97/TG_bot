import asyncio
import logging
import sqlite3
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta, date

logging.basicConfig(level=logging.INFO)

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 874968987

questions = [
    {
        "text": [
            "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è?",
            "–í –∫–∞–∫–æ–º –≥–æ–¥—É –∫–æ–º–ø–∞–Ω–∏—è —Å—Ç–∞–ª–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –°–∫–æ–ª–∫–æ–≤–æ?",
            "–ù–∞–∑–æ–≤–∏—Ç–µ —Ç—Ä–∏ –∫–ª—é—á–µ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã, –≤–∞–∂–Ω—ã–µ –¥–ª—è —Ä–æ—Å—Ç–∞ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏",
            "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ 2-3 –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö –∏ —Å–æ–≤–µ—â–∞–Ω–∏—è—Ö"
        ],
        "time": datetime.now()
    },
    {
        "text": [
            "–ß—Ç–æ —Ç—ã –∑–∞–ø–æ–º–Ω–∏–ª –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –ì—Ä–∏–≥–æ—Ä—å–µ–≤–∞ –ò–≥–æ—Ä—è? –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—É—é –º—ã—Å–ª—å.",
            "–ß—Ç–æ —Ç—ã –∑–∞–ø–æ–º–Ω–∏–ª –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –ê–Ω–¥—Ä–µ–µ–≤–∞ –î–º–∏—Ç—Ä–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—É—é –º—ã—Å–ª—å.",
            "–ü–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é, –∫–∞–∫–æ–µ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥ –∏ –ø–æ—á–µ–º—É?"
        ],
        "time": datetime.combine(date.today(), datetime.min.time()) + timedelta(hours=9, minutes=55)
    },
    {
        "text": [
            "–°–¥–µ–ª–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∫–æ–ª–ª–µ–≥–æ–π —Å –∫–æ—Ç–æ—Ä—ã–º —á–∞—â–µ –≤—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—à—å –ø–æ —Ä–∞–±–æ—Ç–µ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò)."
        ],
        "time": datetime.combine(date.today(), datetime.min.time()) + timedelta(hours=9, minutes=55)
    },
    {
        "text": [
            "–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏ –ø–æ—á–µ–º—É?\n–û–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–±—è ‚Äî –±—É–¥—å —Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –¥–∏–∑–∞–π–Ω, –ø–æ–ª—å–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏ –ø—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞.",
            "–° –ø–æ–º–æ—â—å—é –ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏ –Ω–∞–ø—Ä–∞–≤—å —Å—é–¥–∞ –æ—Ç–≤–µ—Ç —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –æ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –ø–∏—Å–∞–ª(–∞) –≤—ã—à–µ, –≤—ã—Ö–æ–¥—è—â–∏–º–∏ –∑–∞ —Ä–∞–º–∫–∏ –µ–≥–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è."
        ],
        "time": datetime.combine(date.today(), datetime.min.time()) + timedelta(hours=9, minutes=55)
    },
    {
        "text": [
            "–ï—Å–ª–∏ –±—ã –≤—ã –º–æ–≥–ª–∏ –≤–æ–ø–ª–æ—Ç–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã Agile –≤ –æ–±—Ä–∞–∑–µ –∂–∏–≤–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ –∏ –ø–æ—á–µ–º—É?",
            "–ö–∞–∫ –±—ã –≤—ã –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏–ª–∏ –æ–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª Agile, —á—Ç–æ–±—ã –æ–Ω–æ –æ—Ç—Ä–∞–∂–∞–ª–æ –Ω–µ —Ç–æ–ª—å–∫–æ –≥–∏–±–∫–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å, –Ω–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –≤ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã?",
            "–†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ —Ä–µ–±—É—Å –∏–∑ —ç–º–æ–¥–∑–∏ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ Agile-–ø–æ–Ω—è—Ç–∏–µ –∏–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞ –∑–¥–µ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω—ã\n üê¢üìÖüõ†",
        ],
        "time": datetime.combine(date.today(), datetime.min.time()) + timedelta(hours=9, minutes=55)
    },
    {
        "text": [
            "–ó–∞–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —Ü–µ–ø–æ—á–∫–∏: ""–°—Ç–∏—Ö –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏"".\n"
            "–¶–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –æ—Ç—Ä–∞–∂–∞—é—â–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"
            "1. –ü–µ—Ä–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç –∑–∞–¥–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã - —ç—Ç–æ —Ç–æ—Ç –∫—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ —á–∞—Ç –±–æ—Ç–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã):\n"
            "‚Äî –ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–Ω–æ–π —Ñ–æ—Ä–º–µ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É, –ø–æ—Å–≤—è—â—ë–Ω–Ω—É—é –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"
            "2. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ—é —Å—Ç—Ä–æ—á–∫—É, –∑–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É:\n"
            "‚Äî –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –¥–æ–±–∞–≤–∏–≤ –µ—â—ë –æ–¥–Ω—É —Ä–∏—Ñ–º–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ—á–∫—É.\n\n"
            "3. –ó–∞–¥–∞–Ω–∏–µ –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã, –∫–∞–∂–¥—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ—é —Å—Ç—Ä–æ—á–∫—É, —Ä–∞–∑–≤–∏–≤–∞—è –æ–±—â–µ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ."
        ],
        "time": datetime.combine(date.today(), datetime.min.time()) + timedelta(hours=9, minutes=55)
    },
]

# ----------------- –°–æ—Å—Ç–æ—è–Ω–∏—è -------------------
class State(StatesGroup):
    waiting_for_fio = State()
    waiting_for_team = State()
    waiting_for_run_quiz = State()
    asking = State()
    waiting = State()

class InteractiveBot:
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.router = Router()
        self.dp.include_router(self.router)
        self._init_db()

        self.keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö—Ä–∞—Å–Ω—ã–π", callback_data="team_–ö—Ä–∞—Å–Ω—ã–π")],
            [InlineKeyboardButton(text="–ñ–µ–ª—Ç—ã–π", callback_data="team_–ñ–µ–ª—Ç—ã–π")],
            [InlineKeyboardButton(text="–ó–µ–ª—ë–Ω—ã–π", callback_data="team_–ó–µ–ª—ë–Ω—ã–π")],
            [InlineKeyboardButton(text="–°–∏–Ω–∏–π", callback_data="team_–°–∏–Ω–∏–π")]
        ])

        self.scheduler = AsyncIOScheduler()
        self._register_handlers()

    def _init_db(self):
        self.conn = sqlite3.connect('quiz_answers.db')
        self.cur = self.conn.cursor()
        num_questions = sum(len(block["text"]) for block in questions)
        answers_cols = ', '.join([f"answer_{i+1} TEXT" for i in range(num_questions)])
        self.cur.execute(f"""
            CREATE TABLE IF NOT EXISTS answers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                chat_id INTEGER,
                username TEXT,
                full_name TEXT,
                fio TEXT,
                team TEXT,
                current_block INTEGER,
                {answers_cols}
            )
        """)
        self.conn.commit()

    def _register_handlers(self):

        @self.router.message(Command("start"))
        async def cmd_start(message: Message, state: FSMContext):
            await self.name(message)
            await state.set_state(State.waiting_for_fio)

        @self.router.message(State.waiting_for_fio)
        async def registration(message: types.Message, state: FSMContext):
            fio = message.text
            user = message.from_user
            chat_id = message.chat.id
            self.cur.execute(
                "INSERT INTO answers (user_id, chat_id, username, full_name, fio, team) VALUES (?, ?, ?, ?, ?, ?)",
                (user.id, chat_id, user.username or "", user.full_name or "", fio, "")
            )
            self.conn.commit()
            await state.update_data(
                fio=fio, chat_id=chat_id, user_id=user.id
            )
            await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {fio}")
            await self.team(message, state)

        @self.router.callback_query(State.waiting_for_team)
        async def setup_team(callback: types.CallbackQuery, state: FSMContext):
            choice = callback.data.split("_")[1]
            data = await state.get_data()
            chat_id, user_id = data["chat_id"], data["user_id"]
            self.cur.execute("UPDATE answers SET team=? WHERE chat_id=? AND user_id=?", (choice, chat_id, user_id))
            self.conn.commit()
            await state.update_data(team=choice)
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç: {choice}")
            await self.run_quiz(callback.message, state)

        @self.router.callback_query(State.waiting_for_run_quiz)
        async def registration_complete(callback: CallbackQuery, state: FSMContext):
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.message.answer("–ü–æ–≥–Ω–∞–ª–∏! üöÄ")
            await self.start_quiz(callback.message, state)
            self.schedule_all_blocks()

        @self.router.message(State.asking)
        async def next_question(message: types.Message, state: FSMContext):
            data = await state.get_data()
            questions_block = data.get("block_questions", [])
            step = data.get("block_step", 0)
            answers = data.get("answers", [])
            quiz_index = data.get("quiz_index", 0)

            current_question = questions_block[step]

            photo_question_text = (
                "–°–¥–µ–ª–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∫–æ–ª–ª–µ–≥–æ–π —Å –∫–æ—Ç–æ—Ä—ã–º —á–∞—â–µ –≤—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—à—å –ø–æ —Ä–∞–±–æ—Ç–µ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò)."
            )
            if current_question.strip() == photo_question_text.strip():
                if not message.photo:
                    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ üì∑")
                    return
                answers.append(f"photo_file_id:{message.photo[-1].file_id}")
            else:
                answers.append(message.text)

            step += 1
            if step < len(questions_block):
                await state.update_data(block_step=step, answers=answers)
                await message.answer(questions_block[step])
            else:
                await state.update_data(answers=answers)
                await self.save_answers(message, answers, state)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –û–Ω–∏ –∑–∞–ø–∏—Å–∞–Ω—ã. –ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")

                next_quiz_index = quiz_index + 1
                now = datetime.now()
                if next_quiz_index < len(questions) and questions[next_quiz_index]["time"] <= now:
                    next_block_data = questions[next_quiz_index]["text"]
                    await state.clear()
                    await state.update_data(
                        chat_id=message.chat.id,
                        user_id=message.from_user.id,
                        block_questions=next_block_data,
                        block_step=0,
                        answers=[],
                        quiz_index=next_quiz_index
                    )
                    await state.set_state(State.asking)
                    await message.answer(next_block_data[0])
                else:
                    await state.clear()

    async def name(self, message: Message):
        await message.answer("–î–æ—Ä–æ–≥–æ–π –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ¬´–¢—Ä–∞–¥–∏—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª. üéâ")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–∏—è:")

    async def team(self, message: Message, state: FSMContext):
        await message.answer(f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å–≤–æ–µ–≥–æ –±—Ä–∞—Å–ª–µ—Ç–∞, —Ç–∞–∫ –º—ã —Å–º–æ–∂–µ–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Ç–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥:", reply_markup=self.keyboard)
        await state.set_state(State.waiting_for_team)

    async def run_quiz(self, message: types.Message, state: FSMContext):
        keyboard_yes = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–ê", callback_data="button_pressed")]
        ])
        await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üìã")
        await message.answer(f"–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–≥–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–∞:\n\n"
                             f"- –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π —Å–ø–∏–∫–µ—Ä–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã  - –ø–æ–¥–Ω–∏–º–∞–π —Ä—É–∫—É\n"
                             f"- –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è\n"
                             f"- –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–ª—ã\n"
                             f"- –≤ –∫–æ–Ω—Ü–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±—É–¥—É—Ç –ø—Ä–∏–∑—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—á–∫–æ–≤, –∞ —Ç–∞–∫–∂–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏\n\n"
                             f"–ï—Å–ª–∏ –≥–æ—Ç–æ–≤(–∞) –∂–º–∏ –î–ê", reply_markup=keyboard_yes)
        await state.set_state(State.waiting_for_run_quiz)

    async def start_quiz(self, message: types.Message, state: FSMContext):
        index = 0
        block = questions[index]["text"]
        await state.update_data(
            chat_id=message.chat.id,
            user_id=message.from_user.id,
            block_questions=block,
            block_step=0,
            answers=[],
            quiz_index=index
        )
        await message.answer(block[0])
        await state.set_state(State.asking)

    async def save_answers(self, message: types.Message, answers, state: FSMContext):
        data = await state.get_data()
        chat_id = message.chat.id
        user_id = message.from_user.id
        index = data.get("quiz_index", 0)
        start_answer_index = sum(len(q["text"]) for q in questions[:index])
        questions_count = len(questions[index]["text"])
        answers_padded = answers + [""] * (questions_count - len(answers))

        set_clause_parts = []
        params = []
        for i in range(questions_count):
            col_num = start_answer_index + i + 1
            set_clause_parts.append(f"answer_{col_num}=?")
            params.append(answers_padded[i])
        set_clause = ', '.join(set_clause_parts)
        params.extend([chat_id, user_id])

        self.cur.execute(f"UPDATE answers SET {set_clause}, current_block=? WHERE chat_id=? AND user_id=?",(*answers_padded, index + 1, chat_id, user_id))
        self.conn.commit()
        await state.update_data(quiz_index = index + 1)

    def schedule_all_blocks(self):
        self.job = self.scheduler.add_job(self.timer_block_run, "interval", minutes=1)

    async def timer_block_run(self):
        self.cur.execute("SELECT chat_id, user_id, current_block FROM answers")
        for chat_id, user_id, current_block in self.cur.fetchall():
            if current_block >= len(questions) - 1 and hasattr(self, 'job'):  # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
                self.job.remove()
                logging.info("–í—Å–µ –±–ª–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            else:
                await self.try_start_next_block(user_id=user_id, chat_id=chat_id, current_block=current_block)

    async def try_start_next_block(self, chat_id, user_id, current_block):
        now = datetime.now()
        state = FSMContext(self.dp.storage, (chat_id, user_id))
        fsm_state = await state.get_state()
        if fsm_state == State.asking.state:
            return
        for block_index, block in enumerate(questions):
            if (block["time"] <= now) and ((current_block or 0) <= block_index):
                questions_block = block["text"]
                await state.set_data({
                    "chat_id": chat_id,
                    "user_id": user_id,
                    "block_questions": questions_block,
                    "block_step": 0,
                    "answers": [],
                    "quiz_index": block_index,
                })
                await state.set_state(State.asking)
                await self.bot.send_message(chat_id, "–£—Ä–∞! –ù–æ–≤—ã–π –±–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")
                await self.bot.send_message(chat_id, questions_block[0])
                self.cur.execute("UPDATE answers SET current_block=? WHERE chat_id=? AND user_id=?",
                                 (block_index, chat_id, user_id))
                self.conn.commit()
                break

    async def main(self):
        self.scheduler.start()
        await self.dp.start_polling(self.bot)


if __name__ == "__main__":
    tg_bot = InteractiveBot(API_TOKEN)
    asyncio.run(tg_bot.main())