import asyncio
import logging
import sqlite3
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta, date
import re
import gspread
from google.oauth2.service_account import Credentials

from poem import TeamPoemManager, TeamPoemState

logging.basicConfig(level=logging.INFO)

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 874968987

questions = [
    {
        "text": [
            "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è?",
            "–í –∫–∞–∫–æ–º –≥–æ–¥—É –∫–æ–º–ø–∞–Ω–∏—è —Å—Ç–∞–ª–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –°–∫–æ–ª–∫–æ–≤–æ?",
            "–ù–∞–∑–æ–≤–∏—Ç–µ —Ç—Ä–∏ –∫–ª—é—á–µ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã, –≤–∞–∂–Ω—ã–µ –¥–ª—è —Ä–æ—Å—Ç–∞ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏",
            "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ 2-3 –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö –∏ —Å–æ–≤–µ—â–∞–Ω–∏—è—Ö"
        ],
        "time": None
    },
    {
        "text": [
            "–ß—Ç–æ —Ç—ã –∑–∞–ø–æ–º–Ω–∏–ª –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –ì—Ä–∏–≥–æ—Ä—å–µ–≤–∞ –ò–≥–æ—Ä—è? –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—É—é –º—ã—Å–ª—å.",
            "–ß—Ç–æ —Ç—ã –∑–∞–ø–æ–º–Ω–∏–ª –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –ê–Ω–¥—Ä–µ–µ–≤–∞ –î–º–∏—Ç—Ä–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—É—é –º—ã—Å–ª—å.",
            "–ü–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é, –∫–∞–∫–æ–µ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥ –∏ –ø–æ—á–µ–º—É?"
        ],
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        "time": datetime.now() + timedelta(minutes=2)
        # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:
        #"time": datetime.combine(date.today(), datetime.min.time()) + timedelta(hours=9, minutes=55)
    },
    {
        "text": [
            "–°–¥–µ–ª–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∫–æ–ª–ª–µ–≥–æ–π —Å –∫–æ—Ç–æ—Ä—ã–º —á–∞—â–µ –≤—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—à—å –ø–æ —Ä–∞–±–æ—Ç–µ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò)."
        ],
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —á–µ—Ä–µ–∑ 4 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        "time": datetime.now() + timedelta(minutes=3)
        # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:
        # "time": datetime.combine(date.today(), datetime.min.time()) + timedelta(hours=12, minutes=30)
    },
    {
        "text": [
            "–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏ –ø–æ—á–µ–º—É?\n–û–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–±—è ‚Äî –±—É–¥—å —Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –¥–∏–∑–∞–π–Ω, –ø–æ–ª—å–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏ –ø—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞.",
            "–° –ø–æ–º–æ—â—å—é –ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏ –Ω–∞–ø—Ä–∞–≤—å —Å—é–¥–∞ –æ—Ç–≤–µ—Ç —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –æ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –ø–∏—Å–∞–ª(–∞) –≤—ã—à–µ, –≤—ã—Ö–æ–¥—è—â–∏–º–∏ –∑–∞ —Ä–∞–º–∫–∏ –µ–≥–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è."
        ],
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —á–µ—Ä–µ–∑ 6 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        "time": datetime.now() + timedelta(minutes=4)
        # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:
        # "time": datetime.combine(date.today(), datetime.min.time()) + timedelta(hours=14, minutes=30)
    },
    {
        "text": [
            "–ï—Å–ª–∏ –±—ã –≤—ã –º–æ–≥–ª–∏ –≤–æ–ø–ª–æ—Ç–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã Agile –≤ –æ–±—Ä–∞–∑–µ –∂–∏–≤–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ –∏ –ø–æ—á–µ–º—É?",
            "–ö–∞–∫ –±—ã –≤—ã –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏–ª–∏ –æ–¥–Ω–æ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª Agile, —á—Ç–æ–±—ã –æ–Ω–æ –æ—Ç—Ä–∞–∂–∞–ª–æ –Ω–µ —Ç–æ–ª—å–∫–æ –≥–∏–±–∫–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å, –Ω–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –≤ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã?",
            "–†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ —Ä–µ–±—É—Å –∏–∑ —ç–º–æ–¥–∑–∏ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ Agile-–ø–æ–Ω—è—Ç–∏–µ –∏–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞ –∑–¥–µ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω—ã\n üê¢üìÖüõ†",
        ],
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —á–µ—Ä–µ–∑ 8 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        "time": datetime.now() + timedelta(minutes=5)
        # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:
        # "time": datetime.combine(date.today(), datetime.min.time()) + timedelta(hours=15, minutes=00)
    },
    {
        "text": [
            "–ó–∞–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —Ü–µ–ø–æ—á–∫–∏: ""–°—Ç–∏—Ö –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏"".\n"
            "–¶–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –æ—Ç—Ä–∞–∂–∞—é—â–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"
            "1. –ü–µ—Ä–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç –∑–∞–¥–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã - —ç—Ç–æ —Ç–æ—Ç –∫—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ —á–∞—Ç –±–æ—Ç–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã):\n"
            "‚Äî –ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–Ω–æ–π —Ñ–æ—Ä–º–µ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É, –ø–æ—Å–≤—è—â—ë–Ω–Ω—É—é –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"
            "2. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ—é —Å—Ç—Ä–æ—á–∫—É, –∑–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É:\n"
            "‚Äî –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –¥–æ–±–∞–≤–∏–≤ –µ—â—ë –æ–¥–Ω—É —Ä–∏—Ñ–º–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ—á–∫—É.\n\n"
            "3. –ó–∞–¥–∞–Ω–∏–µ –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã, –∫–∞–∂–¥—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ—é —Å—Ç—Ä–æ—á–∫—É, —Ä–∞–∑–≤–∏–≤–∞—è –æ–±—â–µ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ."
        ],
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        "time": datetime.now() + timedelta(minutes=6)
        # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:
        # "time": datetime.combine(date.today(), datetime.min.time()) + timedelta(hours=16, minutes=00)
    },
]

class BotState(StatesGroup):
    waiting_for_fio = State()
    waiting_for_team = State()
    waiting_for_run_quiz = State()
    asking = State()
    waiting = State()

class InteractiveBot:
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.router = Router()
        self.dp.include_router(self.router)
        self._init_db()
        self.poem_manager = TeamPoemManager(self.bot, self.conn, questions)

        self.bot_active = True

        self.admin_export = AdminExport(
            bot=self.bot,
            cur=self.cur,
            admin_id=ADMIN_ID,
            creds_json_path="config/service_account.json",
            spreadsheet_id="1MQMhgMeI5B1zjK-UcPhVGVBHFer5HUMdnyvs0A5FayU"
        )

        self.keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö—Ä–∞—Å–Ω—ã–π", callback_data="team_–ö—Ä–∞—Å–Ω—ã–π")],
            [InlineKeyboardButton(text="–ñ–µ–ª—Ç—ã–π", callback_data="team_–ñ–µ–ª—Ç—ã–π")],
            [InlineKeyboardButton(text="–ó–µ–ª—ë–Ω—ã–π", callback_data="team_–ó–µ–ª—ë–Ω—ã–π")],
            [InlineKeyboardButton(text="–°–∏–Ω–∏–π", callback_data="team_–°–∏–Ω–∏–π")]
        ])

        self.scheduler = AsyncIOScheduler()
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.active_blocks = {}
        self._register_handlers()

    def _init_db(self):
        self.conn = sqlite3.connect('quiz_answers.db')
        self.cur = self.conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        self.cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='answers'")
        table_exists = self.cur.fetchone()

        if not table_exists:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            num_questions = sum(len(block["text"]) for block in questions)
            answers_cols = ', '.join([f"answer_{i + 1} TEXT" for i in range(num_questions)])
            self.cur.execute(f"""
                CREATE TABLE answers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    chat_id INTEGER,
                    username TEXT,
                    full_name TEXT,
                    fio TEXT,
                    team TEXT,
                    current_block INTEGER DEFAULT 0,
                    is_active INTEGER DEFAULT 0,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    {answers_cols}
                )
            """)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
            self.cur.execute("PRAGMA table_info(answers)")
            columns = [column[1] for column in self.cur.fetchall()]

            if 'is_active' not in columns:
                self.cur.execute("ALTER TABLE answers ADD COLUMN is_active INTEGER DEFAULT 0")
                logging.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü is_active")

            if 'last_activity' not in columns:
                self.cur.execute("ALTER TABLE answers ADD COLUMN last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
                logging.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü last_activity")

            if 'current_block' not in columns:
                self.cur.execute("ALTER TABLE answers ADD COLUMN current_block INTEGER DEFAULT 0")
                logging.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü current_block")

        self.conn.commit()

    def _register_handlers(self):
        # 1. –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ (—Å–∞–º—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ)
        @self.router.message(Command("start"))
        async def cmd_start(message: Message, state: FSMContext):
            await self.name(message)
            await state.set_state(BotState.waiting_for_fio)

        @self.router.message(Command("stop"))
        async def stop_cmd(message: Message, state: FSMContext):
            await state.clear()
            await message.answer("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.")

        # 2. –í–°–ï –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ (–¥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞)
        @self.router.message(Command("help_admin"))
        async def admin_help_cmd(message: Message):
            if message.from_user.id != ADMIN_ID:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º.")
                return
            text = (
                "üë©‚Äçüíºüë®‚Äçüíº‚Äç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>:\n\n"
                "/results ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "/quiz_list ‚Äî —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤\n"
                "/block [–Ω–æ–º–µ—Ä_–±–ª–æ–∫–∞] ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞\n"
                "/export ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É\n"
                "/download_all_photos ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É\n"
                "/finish_game ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –¥–æ—Å—Ä–æ—á–Ω–æ\n"
                "/help_admin ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥\n"
            )
            await message.answer(text, parse_mode="HTML")

        @self.router.message(Command("results"))
        async def view_results(message: types.Message):
            if message.from_user.id != ADMIN_ID:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                return
            all_results = self.get_all_answers()
            if not all_results:
                await message.answer("–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
            text = ""
            for idx, row in enumerate(all_results, 1):
                user_info = f"{row[3]} (@{row[2]})"
                num_questions = sum(len(block["text"]) for block in questions)
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–∞—á–∏–Ω–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞ 4, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤—ã–µ 4 –∫–æ–ª–æ–Ω–∫–∏ - —ç—Ç–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
                answers = []
                for i in range(num_questions):
                    answer = row[10 + i] if (10 + i) < len(row) and row[10 + i] is not None else "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
                    answers.append(f"{i + 1}: {answer}")

                text += f"{idx}. {user_info}\n" + "\n".join(answers) + "\n\n"
            for chunk in [text[i:i + 4000] for i in range(0, len(text), 4000)]:
                await message.answer(chunk)

        @self.router.message(Command("quiz_list"))
        async def list_blocks_cmd(message: Message):
            if message.from_user.id != ADMIN_ID:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.")
                return
            text = "–°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤:\n"
            for idx, block in enumerate(questions):
                block_title = block.get("title", f"–ë–ª–æ–∫ ‚Ññ{idx + 1}")
                text += f"{block_title} ‚Äî {len(block['text'])}\n"
            await message.answer(text)

        @self.router.message(Command("block"))
        async def show_block_idx(message: Message):
            if message.from_user.id != ADMIN_ID:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –±–ª–æ–∫–æ–≤ –∑–∞–¥–∞–Ω–∏–π.")
                return
            parts = message.text.split()
            if len(parts) != 2 or not parts[1].isdigit():
                await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /block <–Ω–æ–º–µ—Ä_–±–ª–æ–∫–∞>")
                return
            idx = int(parts[1])
            if 0 <= idx < len(questions):
                block = questions[idx]["text"]
                result = "\n".join([f"{i + 1}. {q}" for i, q in enumerate(block)])
                await message.answer(f"–í–æ–ø—Ä–æ—Å—ã –∫ –±–ª–æ–∫—É #{idx}\n{result}")
            else:
                await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–ª–æ–∫–∞.")

        @self.router.message(Command("finish_game"))
        async def finish_game_cmd(message: Message):
            if message.from_user.id != ADMIN_ID:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            await self.finish_bot_work(message)

        @self.router.message(Command("export"))
        async def export_data(message: Message, state: FSMContext):
            await self.admin_export.export_to_sheet(message)

        @self.router.message(Command("download_all_photos"))
        async def download_all_photos_cmd(message: types.Message):
            if message.from_user.id != ADMIN_ID:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            self.cur.execute("SELECT * FROM answers")
            rows = self.cur.fetchall()
            columns = [desc[0] for desc in self.cur.description]
            photo_file_ids = []
            for row in rows:
                username = row[3] or "unknown"
                for i, col in enumerate(columns):
                    if col.startswith("answer_") and row[i]:
                        if str(row[i]).startswith("photo_file_id:"):
                            photo_file_id = str(row[i]).split(":", 1)[1]
                            photo_file_ids.append((photo_file_id, username))
            saved = 0
            for file_id, username in photo_file_ids:
                try:
                    await self.download_photo_by_file_id(file_id, username)
                    saved += 1
                except Exception as e:
                    await message.answer(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {file_id} ‚Äî {e}")
            await message.answer(f"–ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∞–Ω–æ {saved} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

        # 3. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô (callback_query –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥ message –¥–ª—è —Ç–æ–≥–æ –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        @self.router.callback_query(BotState.waiting_for_team)
        async def setup_team(callback: types.CallbackQuery, state: FSMContext):
            choice = callback.data.split("_")[1]
            data = await state.get_data()
            chat_id, user_id = data["chat_id"], data["user_id"]
            self.cur.execute("UPDATE answers SET team=? WHERE chat_id=? AND user_id=?", (choice, chat_id, user_id))
            self.conn.commit()
            await state.update_data(team=choice)
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç: {choice}")
            await self.run_quiz(callback.message, state)

        @self.router.message(BotState.waiting_for_fio)
        async def registration(message: types.Message, state: FSMContext):
            fio = message.text
            user = message.from_user
            chat_id = message.chat.id

            self.cur.execute("SELECT id FROM answers WHERE user_id=? AND chat_id=?", (user.id, chat_id))
            existing = self.cur.fetchone()

            if existing:
                self.cur.execute(
                    "UPDATE answers SET username=?, full_name=?, fio=?, is_active=0, last_activity=CURRENT_TIMESTAMP WHERE user_id=? AND chat_id=?",
                    (user.username or "", user.full_name or "", fio, user.id, chat_id)
                )
            else:
                self.cur.execute(
                    "INSERT INTO answers (user_id, chat_id, username, full_name, fio, team, current_block, is_active) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                    (user.id, chat_id, user.username or "", user.full_name or "", fio, "", 0, 0)
                )
            self.conn.commit()

            await state.update_data(fio=fio, chat_id=chat_id, user_id=user.id)
            await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {fio}")
            await self.team(message, state)

        @self.router.message(BotState.waiting_for_team)
        async def error_on_team(message: Message):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏!")

        @self.router.callback_query(BotState.waiting_for_run_quiz)
        async def registration_complete(callback: CallbackQuery, state: FSMContext):
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.message.answer("–ü–æ–≥–Ω–∞–ª–∏! üöÄ")
            await self.start_quiz(callback.message, state)
            if not self.scheduler.running:
                self.schedule_all_blocks()

        @self.router.message(BotState.asking)
        async def next_question(message: types.Message, state: FSMContext):
            await self.process_answer(message, state)

        @self.router.message(TeamPoemState.waiting_for_poem_line)
        async def handle_poem_line(message: types.Message, state: FSMContext):
            success = await self.poem_manager.process_poem_line(message, state)
            if success:
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await state.clear()

        # 4. –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–û–°–õ–ï–î–ù–ò–ô!
        @self.router.message()
        async def handle_message_without_state(message: types.Message, state: FSMContext):
            current_state = await state.get_state()

            if current_state == BotState.asking.state:
                await self.process_answer(message, state)
                return

            self.cur.execute("SELECT is_active, current_block FROM answers WHERE chat_id=? AND user_id=?",
                             (message.chat.id, message.from_user.id))
            result = self.cur.fetchone()

            if result and result[0] == 1:
                user_key = f"{message.chat.id}_{message.from_user.id}"

                if user_key in self.active_blocks:
                    active_block_index = self.active_blocks[user_key]
                    data = await state.get_data()

                    if not data.get("block_questions") or data.get("quiz_index") != active_block_index:
                        questions_block = questions[active_block_index]["text"]
                        await state.set_data({
                            "chat_id": message.chat.id,
                            "user_id": message.from_user.id,
                            "block_questions": questions_block,
                            "block_step": 0,
                            "answers": [],
                            "quiz_index": active_block_index,
                        })
                        logging.info(
                            f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, –±–ª–æ–∫ {active_block_index}")

                    await state.set_state(BotState.asking)
                    await self.process_answer(message, state)
                else:
                    logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∞–∫—Ç–∏–≤–µ–Ω –≤ –ë–î, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞")

    async def download_photo_by_file_id(self, photo_file_id, username):
        file = await self.bot.get_file(photo_file_id)
        file_path = file.file_path
        # –û—á–∏—â–∞–µ–º username –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
        safe_username = re.sub(r'[^\w.-]', '_', str(username))
        destination = f"downloaded_images/{safe_username}.jpg"
        os.makedirs("downloaded_images", exist_ok=True)
        with open(destination, "wb") as f:
            file_bytes = await self.bot.download_file(file_path)
            f.write(file_bytes.getvalue())
        return destination

# -----------------------------------------------------------------------------------------------------------------
    async def name(self, message: Message):
        await message.answer("–î–æ—Ä–æ–≥–æ–π –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ¬´–¢—Ä–∞–¥–∏—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª. üéâ")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–∏—è:")

    async def team(self, message: Message, state: FSMContext):
        await message.answer(f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å–≤–æ–µ–≥–æ –±—Ä–∞—Å–ª–µ—Ç–∞, —Ç–∞–∫ –º—ã —Å–º–æ–∂–µ–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Ç–µ–±—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥:", reply_markup=self.keyboard)
        await state.set_state(BotState.waiting_for_team)

    async def run_quiz(self, message: types.Message, state: FSMContext):
        keyboard_yes = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–ê", callback_data="button_pressed")]
        ])
        await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üìã")
        await message.answer(f"–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–≥–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–∞:\n\n"
                             f"- –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–π —Å–ø–∏–∫–µ—Ä–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã  - –ø–æ–¥–Ω–∏–º–∞–π —Ä—É–∫—É\n"
                             f"- –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è\n"
                             f"- –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–ª—ã\n"
                             f"- –≤ –∫–æ–Ω—Ü–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±—É–¥—É—Ç –ø—Ä–∏–∑—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—á–∫–æ–≤, –∞ —Ç–∞–∫–∂–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏\n\n"
                             f"–ï—Å–ª–∏ –≥–æ—Ç–æ–≤(–∞) –∂–º–∏ –î–ê", reply_markup=keyboard_yes)
        await state.set_state(BotState.waiting_for_run_quiz)

    async def start_quiz(self, message: types.Message, state: FSMContext):
        index = 0
        block = questions[index]["text"]

        user_key = f"{message.chat.id}_{message.from_user.id}"
        self.active_blocks[user_key] = index

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.cur.execute(
            "UPDATE answers SET current_block=?, is_active=1, last_activity=CURRENT_TIMESTAMP WHERE chat_id=? AND user_id=?",
            (index, message.chat.id, message.from_user.id)
        )
        self.conn.commit()

        await state.update_data(
            chat_id=message.chat.id,
            user_id=message.from_user.id,
            block_questions=block,
            block_step=0,
            answers=[],
            quiz_index=index
        )
        await message.answer(block[0])
        await state.set_state(BotState.asking)

    async def save_answers(self, message: types.Message, answers, state: FSMContext):
        data = await state.get_data()
        chat_id = message.chat.id
        user_id = message.from_user.id
        index = data.get("quiz_index", 0)

        start_answer_index = sum(len(q["text"]) for q in questions[:index])
        questions_count = len(questions[index]["text"])
        answers_padded = answers + [""] * (questions_count - len(answers))

        set_clause_parts = []
        params = []
        for i in range(questions_count):
            col_num = start_answer_index + i + 1
            set_clause_parts.append(f"answer_{col_num}=?")
            params.append(answers_padded[i])

        set_clause = ', '.join(set_clause_parts)
        params.extend([index + 1, chat_id, user_id])

        self.cur.execute(
            f"UPDATE answers SET {set_clause}, current_block=?, last_activity=CURRENT_TIMESTAMP WHERE chat_id=? AND user_id=?",
            params
        )
        self.conn.commit()

    async def finish_bot_work(self, message: Message = None):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
        try:
            self.bot_active = False

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            self.cur.execute("SELECT DISTINCT chat_id, user_id, fio FROM answers WHERE chat_id IS NOT NULL")
            users = self.cur.fetchall()

            final_message = (
                "–î–æ—Ä–æ–≥–æ–π –∫–æ–ª–ª–µ–≥–∞, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º —Ç–µ–±—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–µ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ! üéä üéâ\n\n"
                "–ù–∞ —ç—Ç–æ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è.üöÄ\n\n"
                "–û–∂–∏–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ üèÜ ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            sent_count = 0
            for chat_id, user_id, fio in users:
                try:
                    await self.bot.send_message(chat_id, final_message)
                    sent_count += 1
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {fio} ({user_id}): {e}")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if self.scheduler.running:
                self.scheduler.shutdown()
                logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏
            self.active_blocks.clear()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
            self.cur.execute("UPDATE answers SET is_active=0 WHERE is_active=1")
            self.conn.commit()

            if message:
                await message.answer(f"‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

            logging.info(f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")
            if message:
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã.")

    def schedule_all_blocks(self):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
        # –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        if not self.scheduler.running:
            self.scheduler.start()
            logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        self.job = self.scheduler.add_job(
            self.timer_block_run,
            "interval",
            seconds=30,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            id="timer_job",  # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            replace_existing=True  # –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
        )
        logging.info("–ó–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ 16:30
        finish_time = datetime.combine(date.today(), datetime.min.time()) + timedelta(hours=16, minutes=30)

        self.scheduler.add_job(
            self.auto_finish_game,
            "date",
            run_date=finish_time,
            id="auto_finish_job",
            replace_existing=True
        )
        logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ {finish_time.strftime('%H:%M')}")

    async def auto_finish_game(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        logging.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∑–∞–ø—É—â–µ–Ω–æ")
        await self.finish_bot_work()

    async def timer_block_run(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–ª–æ–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        try:
            now = datetime.now()
            logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–æ–∫–∏ –≤ {now.strftime('%H:%M:%S')}")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.cur.execute(
                "SELECT chat_id, user_id, current_block, is_active FROM answers WHERE current_block IS NOT NULL"
            )
            users_data = self.cur.fetchall()

            if not users_data:
                logging.info("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for chat_id, user_id, current_block, is_active in users_data:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if is_active == 1:
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö –≤—Å–µ –±–ª–æ–∫–∏
                if current_block >= len(questions):
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
                next_block_index = current_block
                if next_block_index < len(questions):
                    block = questions[next_block_index]
                    block_time = block.get("time")

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ (–ø–µ—Ä–≤—ã–π –±–ª–æ–∫)
                    if block_time is None:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –±–ª–æ–∫–∞
                    if block_time <= now:
                        logging.info(f"–í—Ä–µ–º—è –¥–ª—è –±–ª–æ–∫–∞ {next_block_index} –ø—Ä–∏—à–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        await self.send_next_block(chat_id, user_id, next_block_index)
                    else:
                        time_diff = (block_time - now).total_seconds() / 60
                        logging.info(
                            f"–î–æ –±–ª–æ–∫–∞ {next_block_index} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Å—Ç–∞–ª–æ—Å—å {time_diff:.1f} –º–∏–Ω—É—Ç")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ timer_block_run: {e}", exc_info=True)

    async def send_next_block(self, chat_id, user_id, block_index):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            user_key = f"{chat_id}_{user_id}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if user_key in self.active_blocks:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ –±–ª–æ–∫–µ {self.active_blocks[user_key]}")
                return

            block = questions[block_index]
            questions_block = block["text"]

            # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º –±–ª–æ–∫–∞
            self.active_blocks[user_key] = block_index

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state = FSMContext(self.dp.storage, key=("bot", str(chat_id), str(user_id)))

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.set_data({
                "chat_id": chat_id,
                "user_id": user_id,
                "block_questions": questions_block,
                "block_step": 0,
                "answers": [],
                "quiz_index": block_index,
            })
            await state.set_state(BotState.asking)

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.cur.execute(
                "UPDATE answers SET is_active=1, last_activity=CURRENT_TIMESTAMP WHERE chat_id=? AND user_id=?",
                (chat_id, user_id)
            )
            self.conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.bot.send_message(chat_id, "üîî –£—Ä–∞! –ù–æ–≤—ã–π –±–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω!")
            await self.bot.send_message(chat_id, questions_block[0])

            logging.info(
                f"–ë–ª–æ–∫ {block_index} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–ª–æ–∫–µ: {len(questions_block)}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–ª–æ–∫–∞ {block_index} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
            # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            user_key = f"{chat_id}_{user_id}"
            if user_key in self.active_blocks:
                del self.active_blocks[user_key]

    async def try_start_immediate_next_block(self, message: types.Message, state: FSMContext, current_quiz_index: int):
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –±—ã–ª –∑–∞–ø—É—â–µ–Ω, False - –µ—Å–ª–∏ –Ω–µ—Ç.
        """
        try:
            now = datetime.now()
            chat_id = message.chat.id
            user_id = message.from_user.id

            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–ª–æ–∫
            for next_index in range(current_quiz_index + 1, len(questions)):
                if not self.bot_active:
                    await message.answer("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.")
                    break

                next_block = questions[next_index]
                block_time = next_block.get("time")

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                if block_time is None:
                    continue

                if block_time <= now:
                    # –°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                    questions_block = next_block["text"]
                    user_key = f"{chat_id}_{user_id}"

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
                    self.active_blocks[user_key] = next_index

                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
                    await state.clear()
                    await state.set_data({
                        "chat_id": chat_id,
                        "user_id": user_id,
                        "block_questions": questions_block,
                        "block_step": 0,
                        "answers": [],
                        "quiz_index": next_index,
                    })
                    await state.set_state(BotState.asking)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    self.cur.execute(
                        "UPDATE answers SET current_block=?, is_active=1, last_activity=CURRENT_TIMESTAMP WHERE chat_id=? AND user_id=?",
                        (next_index, chat_id, user_id)
                    )
                    self.conn.commit()

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±–ª–æ–∫–µ –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
                    await message.answer("üîî –°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
                    await message.answer(questions_block[0])

                    logging.info(f"–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—É—â–µ–Ω –±–ª–æ–∫ {next_index} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return True
                else:
                    # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                    break

            return False

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ try_start_immediate_next_block –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

    async def process_answer(self, message: types.Message, state: FSMContext):
        data = await state.get_data()
        questions_block = data.get("block_questions", [])
        step = data.get("block_step", 0)
        answers = data.get("answers", [])
        quiz_index = data.get("quiz_index", 0)

        if not self.bot_active:
            await message.answer("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —à–∞–≥
        if not questions_block or step >= len(questions_block):
            logging.error(f"–û—à–∏–±–∫–∞: questions_block –ø—É—Å—Ç–æ–π –∏–ª–∏ step –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü. "
                          f"questions_block: {questions_block}, step: {step}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        current_question = questions_block[step]

        photo_question_text = (
            "–°–¥–µ–ª–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∫–æ–ª–ª–µ–≥–æ–π —Å –∫–æ—Ç–æ—Ä—ã–º —á–∞—â–µ –≤—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—à—å –ø–æ —Ä–∞–±–æ—Ç–µ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò)."
        )
        if current_question.strip() == photo_question_text.strip():
            if not message.photo:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ üì∑")
                return
            answers.append(f"photo_file_id:{message.photo[-1].file_id}")
        else:
            answers.append(message.text)

        step += 1
        if step < len(questions_block):
            await state.update_data(block_step=step, answers=answers)
            await message.answer(questions_block[step])
        else:
            await state.update_data(answers=answers)
            await self.save_answers(message, answers, state)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–ª–æ–∫
            next_block_started = await self.try_start_immediate_next_block(message, state, quiz_index)

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ (—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ), –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–æ–±—É—é –ª–æ–≥–∏–∫—É
            if quiz_index == 4:  # –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞ —Å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ–º
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
                poem_started = await self.poem_manager.check_and_start_poem_for_user(
                    message.from_user.id,
                    message.chat.id
                )

                if poem_started:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
                    await state.set_state(TeamPoemState.waiting_for_poem_line)
                    return

            if not next_block_started:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                if quiz_index + 1 >= len(questions):
                    # –í—Å–µ –±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
                    await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –±–ª–æ–∫–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!\n\n"
                                         "–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ ¬´–¢—Ä–∞–¥–∏—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª. "
                                         "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∏ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã –ø—Ä–∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤.\n\n"
                                         "–û–∂–∏–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è! üèÜ")
                else:
                    # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                    next_time = questions[quiz_index + 1]["time"]
                    time_str = next_time.strftime("%H:%M") if next_time else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
                    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –û–Ω–∏ –∑–∞–ø–∏—Å–∞–Ω—ã.\n"
                                         f"–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ {time_str}. "
                                         f"–Ø –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! ‚è∞")

                # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–ª–æ–∫–∞
                user_key = f"{message.chat.id}_{message.from_user.id}"
                if user_key in self.active_blocks:
                    del self.active_blocks[user_key]

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                self.cur.execute(
                    "UPDATE answers SET is_active=0, last_activity=CURRENT_TIMESTAMP WHERE chat_id=? AND user_id=?",
                    (message.chat.id, message.from_user.id)
                )
                self.conn.commit()

                await state.clear()

    def get_all_answers(self):
        self.cur.execute("SELECT * FROM answers")
        return self.cur.fetchall()

    async def main(self):
        try:
            logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            await self.dp.start_polling(self.bot)
        finally:
            self.conn.close()
            if self.scheduler.running:
                self.scheduler.shutdown()
            logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

class AdminExport:
    def __init__(self, bot: Bot, cur: sqlite3.Cursor, admin_id: int,
                 creds_json_path: str, spreadsheet_id: str):
        self.bot = bot
        self.cur = cur
        self.admin_id = admin_id
        self.spreadsheet_id = spreadsheet_id
        self.creds_json_path = creds_json_path

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        creds = Credentials.from_service_account_file(self.creds_json_path, scopes=scopes)
        self.gc = gspread.authorize(creds)

    def _get_all_answers_data(self, table_name: str):
        if not table_name.isidentifier():
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã!")
        # –ë–µ—Ä–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã answers
        query = f"SELECT * FROM {table_name}"
        self.cur.execute(query)

        columns = [desc[0] for desc in self.cur.description]
        rows = self.cur.fetchall()
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤, –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
        data = [columns]
        for row in rows:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫—É (Google Sheets API —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫–∏/—á–∏—Å–ª–∞)
            data.append([str(cell) if cell is not None else "" for cell in row])
        return data

    async def export_to_sheet(self, message: Message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—à–µ—Ç –∞–¥–º–∏–Ω
        if message.from_user.id != self.admin_id:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        try:
            sheet = self.gc.open_by_key(self.spreadsheet_id).sheet1  # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç
            data = self._get_all_answers_data("answers")
            sheet.clear()  # –ß–∏—Å—Ç–∏–º –ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            sheet.update('A1', data)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å —è—á–µ–π–∫–∏ A1

            spreadsheet = self.gc.open_by_key(self.spreadsheet_id)
            sheet = spreadsheet.get_worksheet(1)
            data = self._get_all_answers_data("poem_contributions")
            sheet.clear()  # –ß–∏—Å—Ç–∏–º –ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            sheet.update('A1', data)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å —è—á–µ–π–∫–∏ A1

            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É.")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Google Sheets")


if __name__ == "__main__":
    tg_bot = InteractiveBot(API_TOKEN)
    asyncio.run(tg_bot.main())