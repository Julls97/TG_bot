import asyncio
import logging
import sqlite3
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, field, asdict
from enum import Enum

from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


# ==================== DATACLASSES –ò ENUMS ====================

class PoemStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
    NOT_STARTED = "not_started"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    CANCELLED = "cancelled"


@dataclass
class TeamMember:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã"""
    user_id: int
    chat_id: int
    fio: str
    username: str
    order: int  # –ü–æ—Ä—è–¥–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏
    has_contributed: bool = False
    contribution: str = ""
    skipped: bool = False  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤


@dataclass
class TeamPoem:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
    team: str
    status: PoemStatus = PoemStatus.NOT_STARTED
    members: List[TeamMember] = field(default_factory=list)
    lines: List[str] = field(default_factory=list)
    current_member_index: int = 0
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    _ready_for_completion: bool = False

    def get_current_member(self) -> Optional[TeamMember]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if 0 <= self.current_member_index < len(self.members):
            return self.members[self.current_member_index]
        
        # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        logging.debug(f"current_member_index {self.current_member_index} –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã [0, {len(self.members)})")
        return None

    def get_poem_text(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
        if not self.lines:
            return "–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–æ..."

        poem_text = "üìú **–ù–∞—à–µ –∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ:**\n\n"
        for i, line in enumerate(self.lines, 1):
            poem_text += f"{i}. {line}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        skipped_members = [m for m in self.members if m.skipped and not m.has_contributed]
        if skipped_members:
            poem_text += "\n‚ö†Ô∏è **–ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ–π —Ö–æ–¥:**\n"
            for member in skipped_members:
                poem_text += f"‚Ä¢ {member.fio}\n"
        
        return poem_text

    def add_line(self, line: str, member: TeamMember):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ"""
        self.lines.append(line)
        member.has_contributed = True
        member.contribution = line
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å IN_PROGRESS
        if len(self.lines) == 1:
            self.status = PoemStatus.IN_PROGRESS
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
        is_last_member = (self.current_member_index == len(self.members) - 1)
        
        if not is_last_member:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
            self.current_member_index += 1
        else:
            # –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫, —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
            logging.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ {member.fio} –¥–æ–±–∞–≤–∏–ª —Å—Ç—Ä–æ–∫—É, —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
            self.status = PoemStatus.IN_PROGRESS  # –û—Å—Ç–∞–µ—Ç—Å—è IN_PROGRESS, –Ω–æ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º current_member_index –≤ -1, —á—Ç–æ–±—ã _process_next_member –∑–∞–≤–µ—Ä—à–∏–ª —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
            self.current_member_index = -1
            # –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–µ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
            self._ready_for_completion = True

    def skip_member(self, member: TeamMember):
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        member.skipped = True
        member.has_contributed = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
        is_last_member = (self.current_member_index == len(self.members) - 1)
        
        if not is_last_member:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
            self.current_member_index += 1
        else:
            # –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫, —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
            logging.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ {member.fio} –ø—Ä–æ–ø—É—â–µ–Ω, —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º current_member_index –≤ -1, —á—Ç–æ–±—ã _process_next_member –∑–∞–≤–µ—Ä—à–∏–ª —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
            self.current_member_index = -1
            # –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–µ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
            self._ready_for_completion = True


# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ====================

class TeamPoemState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
    waiting_for_poem_line = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞


# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° ====================

class TeamPoemManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.
    """

    def __init__(self, bot: Bot, db_connection: sqlite3.Connection, dp=None):
        self.bot = bot
        self.conn = db_connection
        self.cur = db_connection.cursor()
        self.dp = dp  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Dispatcher –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        self.team_poems: Dict[str, TeamPoem] = {}

        # –ú–∞–ø–ø–∏–Ω–≥ user_id -> team –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.user_to_team: Dict[int, str] = {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π
        self._init_poem_table()

        # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
        self.response_timeout = 2

        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self.active_timers: Dict[int, asyncio.Task] = {}

        logging.info("TeamPoemManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _init_poem_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π"""
        self.cur.execute("""
            CREATE TABLE IF NOT EXISTS team_poems (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                team TEXT NOT NULL,
                status TEXT NOT NULL,
                poem_data TEXT NOT NULL, -- JSON —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                started_at TIMESTAMP,
                completed_at TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤
        self.cur.execute("""
            CREATE TABLE IF NOT EXISTS poem_contributions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                team TEXT NOT NULL,
                user_id INTEGER NOT NULL,
                chat_id INTEGER NOT NULL,
                fio TEXT,
                line_number INTEGER,
                contribution TEXT,
                contributed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

        self.conn.commit()
        logging.info("–¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã")

    async def check_team_readiness_and_start(self, team: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ.

        Args:
            team: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (—Ü–≤–µ—Ç)

        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Ä–∞–Ω–µ–µ
        """
        try:
            logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã {team} –∫ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—é")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
            if team in self.team_poems:
                if self.team_poems[team].status == PoemStatus.IN_PROGRESS:
                    logging.info(f"–ü—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                    return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∏–¥—ë—Ç
                elif self.team_poems[team].status == PoemStatus.COMPLETED:
                    logging.info(f"–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {team} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Ç–æ–≤—ã (–¥–æ—Å—Ç–∏–≥–ª–∏ –±–ª–æ–∫–∞ 5)
            self.cur.execute("""
                SELECT COUNT(*) as total,
                       SUM(CASE WHEN current_block >= 5 THEN 1 ELSE 0 END) as ready
                FROM answers
                WHERE team = ?
            """, (team,))

            result = self.cur.fetchone()
            if not result:
                logging.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∞–Ω–¥–µ {team} –≤ –ë–î")
                return False

            total, ready = result
            logging.info(f"–ö–æ–º–∞–Ω–¥–∞ {team}: {ready}/{total} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—é")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –í–°–ï —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–æ—Ç–æ–≤—ã
            if ready == total and total > 0:
                logging.info(f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã {team} –≥–æ—Ç–æ–≤—ã ({ready}/{total}). –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ.")
                return await self.start_team_poem_block(team)
            else:
                logging.info(f"–ö–æ–º–∞–Ω–¥–∞ {team}: —Ç–æ–ª—å–∫–æ {ready}/{total} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—é")
                return False

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã {team}: {e}", exc_info=True)
            return False

    async def start_team_poem_block(self, team: str) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.

        Args:
            team: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (—Ü–≤–µ—Ç)

        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
        """
        try:
            logging.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
            if team in self.team_poems and self.team_poems[team].status == PoemStatus.IN_PROGRESS:
                logging.warning(f"–ü—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ—Ä—è–¥–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            members = self._get_team_members(team)
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team}")

            if not members:
                logging.warning(f"–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ {team}")
                return False

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è
            poem = TeamPoem(
                team=team,
                status=PoemStatus.IN_PROGRESS,
                members=members,
                started_at=datetime.now()
            )

            self.team_poems[team] = poem

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for member in members:
                self.user_to_team[member.user_id] = team
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {member.fio} (user_id: {member.user_id}) –≤ –∫–æ–º–∞–Ω–¥—É {team}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã
            await self._send_instructions_to_team(poem)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            await self._request_line_from_member(poem.members[0], poem)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self._save_poem_state(poem)

            logging.info(f"–ü—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team} —Å {len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")
            return True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team}: {e}", exc_info=True)
            return False

    def _get_team_members(self, team: str) -> List[TeamMember]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ë–î"""
        logging.info(f"üé≠ [POEM] –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã {team} —Å current_block >= 5")
        
        self.cur.execute("""
            SELECT user_id, chat_id, fio, username, current_block
            FROM answers
            WHERE team = ? --AND current_block >= 5
            ORDER BY id -- –ü–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """, (team,))

        rows = self.cur.fetchall()
        logging.info(f"üé≠ [POEM] –ù–∞–π–¥–µ–Ω–æ {len(rows)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã {team} —Å current_block >= 5")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for row in rows:
            logging.info(f"üé≠ [POEM] –£—á–∞—Å—Ç–Ω–∏–∫: user_id={row[0]}, chat_id={row[1]}, fio={row[2]}, username={row[3]}, current_block={row[4]}")

        members = []
        for i, row in enumerate(rows):
            members.append(TeamMember(
                user_id=row[0],
                chat_id=row[1],
                fio=row[2] or "–£—á–∞—Å—Ç–Ω–∏–∫",
                username=row[3] or "",
                order=i
            ))

        logging.info(f"üé≠ [POEM] –°–æ–∑–¥–∞–Ω–æ {len(members)} –æ–±—ä–µ–∫—Ç–æ–≤ TeamMember –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team}")
        return members

    async def _send_instructions_to_team(self, poem: TeamPoem):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã"""
        instruction_text = (
            "üé≠ **–ö–û–ú–ê–ù–î–ù–û–ï –ó–ê–î–ê–ù–ò–ï: –°–¢–ò–•–û–¢–í–û–†–ï–ù–ò–ï –û –ö–û–ú–ü–ê–ù–ò–ò**\n\n"
            f"–ö–æ–º–∞–Ω–¥–∞: {poem.team}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(poem.members)}\n\n"
            "üìã **–ü—Ä–∞–≤–∏–ª–∞:**\n"
            "1Ô∏è‚É£ –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–∏—à–µ—Ç –û–î–ù–£ —Å—Ç—Ä–æ–∫—É —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è\n"
            "2Ô∏è‚É£ –°—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏\n"
            "3Ô∏è‚É£ –í—ã —É–≤–∏–¥–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º —Å–≤–æ–µ–π\n"
            "4Ô∏è‚É£ –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∏—Ñ–º—É –∏ —Ä–∏—Ç–º\n"
            f"5Ô∏è‚É£ –£ –≤–∞—Å –µ—Å—Ç—å {self.response_timeout} –º–∏–Ω—É—Ç—ã –Ω–∞ –æ—Ç–≤–µ—Ç\n\n"
            "üîÑ **–ü–æ—Ä—è–¥–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for i, member in enumerate(poem.members, 1):
            status = "‚úÖ" if member.has_contributed else "‚è≥"
            instruction_text += f"{i}. {member.fio} {status}\n"

        instruction_text += "\nüí´ –£–¥–∞—á–∏ –≤ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ!"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        for member in poem.members:
            try:
                await self.bot.send_message(
                    member.chat_id,
                    instruction_text,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫—É {member.user_id}: {e}")

    async def _request_line_from_member(self, member: TeamMember, poem: TeamPoem):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if self.dp:
                from aiogram.fsm.context import FSMContext
                state = FSMContext(self.dp.storage, key=("bot", str(member.chat_id), str(member.user_id)))
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
                await state.clear()
                await state.set_state(TeamPoemState.waiting_for_poem_line)
                await state.set_data({
                    "team": poem.team,
                    "waiting_for_poem": True,
                    "poem_member_id": member.user_id  # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞
                })
                logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ TeamPoemState.waiting_for_poem_line –¥–ª—è user_id={member.user_id}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ–º
            message_text = f"üñä **{member.fio}, –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!**\n\n"

            if poem.lines:
                message_text += poem.get_poem_text() + "\n"
            else:
                message_text += "–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!\n\n"

            message_text += (
                "‚úçÔ∏è **–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.**\n"
                "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º—ã—Å–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∏—Ñ–º—É.\n\n"
                f"‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å {self.response_timeout} –º–∏–Ω—É—Ç—ã –Ω–∞ –æ—Ç–≤–µ—Ç."
            )

            await self.bot.send_message(
                member.chat_id,
                message_text,
                parse_mode="Markdown"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î - –ø–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
            self.cur.execute(
                "UPDATE answers SET is_active=1 WHERE user_id=? AND chat_id=?",
                (member.user_id, member.chat_id)
            )
            self.conn.commit()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
            timer_task = asyncio.create_task(
                self._timeout_handler(member, poem)
            )
            self.active_timers[member.user_id] = timer_task

            logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.fio} (user_id: {member.user_id})")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–æ–∫–∏ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.user_id}: {e}")
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            poem.skip_member(member)
            await self._process_next_member(poem)

    async def _timeout_handler(self, member: TeamMember, poem: TeamPoem):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        try:
            await asyncio.sleep(self.response_timeout * 60)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫
            if not member.has_contributed and not member.skipped:
                logging.warning(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.fio} (user_id: {member.user_id})")

                # –ü–æ–º–µ—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ
                poem.skip_member(member)

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—Å–∫ –≤ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
                skip_line = f"[–ü—Ä–æ–ø—É—â–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º {member.fio}]"
                poem.lines.append(skip_line)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                try:
                    await self.bot.send_message(
                        member.chat_id,
                        "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –í–∞—à —Ö–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω.\n"
                        "–ü–µ—Ä–µ–¥–∞–µ–º —Å–ª–æ–≤–æ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.",
                        parse_mode="Markdown"
                    )
                except:
                    pass

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
                await self._process_next_member(poem)

        except asyncio.CancelledError:
            logging.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.user_id} –æ—Ç–º–µ–Ω–µ–Ω")

    async def process_poem_line(self, message: types.Message, state: FSMContext) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Å—Ç—Ä–æ–∫–∏
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM

        Returns:
            bool: True –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
        """
        try:
            user_id = message.from_user.id
            chat_id = message.chat.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            state_data = await state.get_data()
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –æ—Ç user_id={user_id}, state_data={state_data}")

            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞
            team = self.user_to_team.get(user_id)
            if not team or team not in self.team_poems:
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.")
                return False

            poem = self.team_poems[team]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—á–µ—Ä–µ–¥—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            current_member = poem.get_current_member()
            if not current_member or current_member.user_id != user_id:
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–µ –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å. –¢–µ–∫—É—â–∏–π: {current_member.user_id if current_member else 'None'}")
                await message.answer(
                    "‚è≥ –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞."
                )
                return False

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å
            if current_member.has_contributed or current_member.skipped:
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –∏–ª–∏ –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω")
                await message.answer("‚ùå –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º –≤ –æ—á–µ—Ä–µ–¥–∏
            if poem.current_member_index < 0 or poem.current_member_index >= len(poem.members):
                logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π current_member_index: {poem.current_member_index} –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å {len(poem.members)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return False

            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
            if user_id in self.active_timers:
                self.active_timers[user_id].cancel()
                del self.active_timers[user_id]

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
            line_text = message.text.strip()
            if not line_text:
                await message.answer("‚ùå –°—Ç—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return False

            poem.add_line(line_text, current_member)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self._save_contribution(poem.team, current_member, line_text, len(poem.lines))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.answer(
                "‚úÖ –í–∞—à–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ!\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥! üé≠"
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å—é –∫–æ–º–∞–Ω–¥—É –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            await self._notify_team_progress(poem, current_member)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
            completed_user_ids = await self._process_next_member(poem)

            logging.info(f"–°—Ç—Ä–æ–∫–∞ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: '{line_text}'")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            return completed_user_ids if completed_user_ids else True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –æ—Ç user_id={user_id}: {e}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return False

    async def _process_next_member(self, poem: TeamPoem):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
            next_member = poem.get_current_member()

            if next_member:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —É —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                await self._request_line_from_member(next_member, poem)
            else:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –µ—Å–ª–∏:
                # 1. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∏–ª–∏
                # 2. –°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–µ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é, –∏–ª–∏
                # 3. current_member_index –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ -1)
                all_processed = all(member.has_contributed or member.skipped for member in poem.members)
                index_out_of_bounds = poem.current_member_index < 0 or poem.current_member_index >= len(poem.members)
                
                if all_processed or poem._ready_for_completion or index_out_of_bounds:
                    logging.info(f"–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {poem.team} –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é. "
                               f"–í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {all_processed}, –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é: {poem._ready_for_completion}, "
                               f"–∏–Ω–¥–µ–∫—Å –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü: {index_out_of_bounds}")
                    completed_user_ids = await self._complete_team_poem(poem)
                    return completed_user_ids
                else:
                    logging.warning(f"–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {poem.team} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ - "
                                  f"–Ω–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –Ω–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é")
                    return []

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É: {e}")
            return []

    async def _complete_team_poem(self, poem: TeamPoem):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
        try:
            poem.status = PoemStatus.COMPLETED
            poem.completed_at = datetime.now()

            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
            for member in poem.members:
                if member.user_id in self.active_timers:
                    self.active_timers[member.user_id].cancel()
                    del self.active_timers[member.user_id]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            completion_text = (
                    "üéâ **–°–¢–ò–•–û–¢–í–û–†–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!**\n\n"
                    f"–ö–æ–º–∞–Ω–¥–∞ {poem.team} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∞ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ!\n\n"
                    + poem.get_poem_text() + "\n\n"
                                             "üëè **–ê–≤—Ç–æ—Ä—ã:**\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª)
            for member in poem.members:
                if member.has_contributed:
                    completion_text += f"‚Ä¢ {member.fio}\n"

            completion_text += "\nüèÜ –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã
            for member in poem.members:
                try:
                    await self.bot.send_message(
                        member.chat_id,
                        completion_text,
                        parse_mode="Markdown"
                    )

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
                    self.cur.execute(
                        "UPDATE answers SET current_block=6, is_active=0 WHERE user_id=? AND chat_id=?",
                        (member.user_id, member.chat_id)
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
                    await self.bot.send_message(
                        member.chat_id,
                        "üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –±–ª–æ–∫–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã!\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ ¬´–¢—Ä–∞–¥–∏—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª. "
                        "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∏ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã –ø—Ä–∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤.\n\n"
                        "–û–∂–∏–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è! üèÜ"
                    )

                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫—É {member.user_id}: {e}")

            self.conn.commit()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
            self._save_poem_state(poem)

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            del self.team_poems[poem.team]
            for member in poem.members:
                self.user_to_team.pop(member.user_id, None)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–∑ active_blocks
            return [member.user_id for member in poem.members]

            logging.info(f"–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {poem.team} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è: {e}")

    async def _notify_team_progress(self, poem: TeamPoem, last_contributor: TeamMember):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
        progress_text = (
            f"üìù **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è**\n\n"
            f"{last_contributor.fio} –¥–æ–±–∞–≤–∏–ª(–∞) —Å—Ç—Ä–æ–∫—É:\n"
            f"‚û°Ô∏è _{poem.lines[-1]}_\n\n"
            f"–°—Ç—Ä–æ–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ: {len(poem.lines)}/{len(poem.members)}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º, –∫—Ä–æ–º–µ –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
        for member in poem.members:
            if member.user_id != last_contributor.user_id:
                try:
                    await self.bot.send_message(
                        member.chat_id,
                        progress_text,
                        parse_mode="Markdown"
                    )
                except:
                    pass

    def _save_poem_state(self, poem: TeamPoem):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –≤ –ë–î"""
        try:
            poem_data = {
                'team': poem.team,
                'status': poem.status.value,
                'lines': poem.lines,
                'members': [
                    {
                        'user_id': m.user_id,
                        'fio': m.fio,
                        'has_contributed': m.has_contributed,
                        'contribution': m.contribution,
                        'skipped': m.skipped
                    }
                    for m in poem.members
                ],
                'current_member_index': poem.current_member_index
            }

            self.cur.execute("""
                INSERT OR REPLACE INTO team_poems 
                (team, status, poem_data, started_at, completed_at)
                VALUES (?, ?, ?, ?, ?)
            """, (
                poem.team,
                poem.status.value,
                json.dumps(poem_data, ensure_ascii=False),
                poem.started_at,
                poem.completed_at
            ))

            self.conn.commit()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è: {e}")

    def _save_contribution(self, team: str, member: TeamMember, line: str, line_number: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ –ë–î"""
        try:
            self.cur.execute("""
                INSERT INTO poem_contributions
                (team, user_id, chat_id, fio, line_number, contribution)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (team, member.user_id, member.chat_id, member.fio, line_number, line))

            self.conn.commit()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∞: {e}")

    async def reset_user_poem_state(self, user_id: int, chat_id: int) -> bool:
        """
        –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            team = self.user_to_team.get(user_id)
            if not team or team not in self.team_poems:
                return False

            poem = self.team_poems[team]

            # –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            current_member = None
            for member in poem.members:
                if member.user_id == user_id:
                    current_member = member
                    break

            if not current_member:
                return False

            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            if user_id in self.active_timers:
                self.active_timers[user_id].cancel()
                del self.active_timers[user_id]

            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–Ω–æ–≤–æ
            if poem.get_current_member() and poem.get_current_member().user_id == user_id:
                await self._request_line_from_member(current_member, poem)
                return True

            return False

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

    def is_user_in_poem_process(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        """
        team = self.user_to_team.get(user_id)
        if not team or team not in self.team_poems:
            logging.info(f"üé≠ [POEM] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: False (–Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞)")
            return False

        poem = self.team_poems[team]
        is_in_process = poem.status == PoemStatus.IN_PROGRESS
        
        if is_in_process:
            current_member = poem.get_current_member()
            logging.info(f"üé≠ [POEM] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –∫–æ–º–∞–Ω–¥–µ {team}, —Ç–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫: {current_member.user_id if current_member else 'None'}")
        
        return is_in_process

    def is_team_poem_active(self, team: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.

        Args:
            team: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã

        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω
        """
        if team not in self.team_poems:
            return False
        return self.team_poems[team].status in [PoemStatus.IN_PROGRESS, PoemStatus.COMPLETED]

    def get_team_poem_stats(self, team: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã"""
        try:
            self.cur.execute("""
                SELECT status, poem_data, started_at, completed_at
                FROM team_poems
                WHERE team = ?
                ORDER BY created_at DESC LIMIT 1
            """, (team,))

            result = self.cur.fetchone()
            if result:
                poem_data = json.loads(result[1])
                return {
                    'status': result[0],
                    'lines_count': len(poem_data.get('lines', [])),
                    'members_count': len(poem_data.get('members', [])),
                    'started_at': result[2],
                    'completed_at': result[3],
                    'lines': poem_data.get('lines', [])
                }

            return None

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None