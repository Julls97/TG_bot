import asyncio
import logging
import sqlite3
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, field, asdict
from enum import Enum

from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


# ==================== DATACLASSES –ò ENUMS ====================

class PoemStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
    NOT_STARTED = "not_started"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    CANCELLED = "cancelled"


@dataclass
class TeamMember:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã"""
    user_id: int
    chat_id: int
    fio: str
    username: str
    order: int  # –ü–æ—Ä—è–¥–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏
    has_contributed: bool = False
    contribution: str = ""


@dataclass
class TeamPoem:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
    team: str
    status: PoemStatus = PoemStatus.NOT_STARTED
    members: List[TeamMember] = field(default_factory=list)
    lines: List[str] = field(default_factory=list)
    current_member_index: int = 0
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None

    def get_current_member(self) -> Optional[TeamMember]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        if 0 <= self.current_member_index < len(self.members):
            return self.members[self.current_member_index]
        return None

    def get_poem_text(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
        if not self.lines:
            return "–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–æ..."

        poem_text = "üìú **–ù–∞—à–µ –∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ:**\n\n"
        for i, line in enumerate(self.lines, 1):
            poem_text += f"{i}. {line}\n"
        return poem_text

    def add_line(self, line: str, member: TeamMember):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ"""
        self.lines.append(line)
        member.has_contributed = True
        member.contribution = line
        self.current_member_index += 1


# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ====================

class TeamPoemState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
    waiting_for_poem_line = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞


# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° ====================

class TeamPoemManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.
    """

    def __init__(self, bot: Bot, db_connection: sqlite3.Connection):
        self.bot = bot
        self.conn = db_connection
        self.cur = db_connection.cursor()

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        self.team_poems: Dict[str, TeamPoem] = {}

        # –ú–∞–ø–ø–∏–Ω–≥ user_id -> team –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.user_to_team: Dict[int, str] = {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π
        self._init_poem_table()

        # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
        self.response_timeout = 2

        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self.active_timers: Dict[int, asyncio.Task] = {}

        logging.info("TeamPoemManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _init_poem_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π"""
        self.cur.execute("""
                         CREATE TABLE IF NOT EXISTS team_poems
                         (
                             id
                             INTEGER
                             PRIMARY
                             KEY
                             AUTOINCREMENT,
                             team
                             TEXT
                             NOT
                             NULL,
                             status
                             TEXT
                             NOT
                             NULL,
                             poem_data
                             TEXT
                             NOT
                             NULL, -- JSON —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                             started_at
                             TIMESTAMP,
                             completed_at
                             TIMESTAMP,
                             created_at
                             TIMESTAMP
                             DEFAULT
                             CURRENT_TIMESTAMP
                         )
                         """)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤
        self.cur.execute("""
                         CREATE TABLE IF NOT EXISTS poem_contributions
                         (
                             id
                             INTEGER
                             PRIMARY
                             KEY
                             AUTOINCREMENT,
                             team
                             TEXT
                             NOT
                             NULL,
                             user_id
                             INTEGER
                             NOT
                             NULL,
                             chat_id
                             INTEGER
                             NOT
                             NULL,
                             fio
                             TEXT,
                             line_number
                             INTEGER,
                             contribution
                             TEXT,
                             contributed_at
                             TIMESTAMP
                             DEFAULT
                             CURRENT_TIMESTAMP
                         )
                         """)

        self.conn.commit()
        logging.info("–¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã")

    async def start_team_poem_block(self, team: str) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.

        Args:
            team: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (—Ü–≤–µ—Ç)

        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
            if team in self.team_poems and self.team_poems[team].status == PoemStatus.IN_PROGRESS:
                logging.warning(f"–ü—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ—Ä—è–¥–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            members = self._get_team_members(team)

            if not members:
                logging.warning(f"–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ {team}")
                return False

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è
            poem = TeamPoem(
                team=team,
                status=PoemStatus.IN_PROGRESS,
                members=members,
                started_at=datetime.now()
            )

            self.team_poems[team] = poem

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for member in members:
                self.user_to_team[member.user_id] = team

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã
            await self._send_instructions_to_team(poem)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            await self._request_line_from_member(poem.members[0], poem)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self._save_poem_state(poem)

            logging.info(f"–ü—Ä–æ—Ü–µ—Å—Å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team} —Å {len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")
            return True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team}: {e}")
            return False

    def _get_team_members(self, team: str) -> List[TeamMember]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ë–î"""
        self.cur.execute("""
                         SELECT user_id, chat_id, fio, username
                         FROM answers
                         WHERE team = ?
                         ORDER BY id -- –ü–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                         """, (team,))

        members = []
        for i, row in enumerate(self.cur.fetchall()):
            members.append(TeamMember(
                user_id=row[0],
                chat_id=row[1],
                fio=row[2] or "–£—á–∞—Å—Ç–Ω–∏–∫",
                username=row[3] or "",
                order=i
            ))

        return members

    async def _send_instructions_to_team(self, poem: TeamPoem):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã"""
        instruction_text = (
            "üé≠ **–ö–û–ú–ê–ù–î–ù–û–ï –ó–ê–î–ê–ù–ò–ï: –°–¢–ò–•–û–¢–í–û–†–ï–ù–ò–ï –û –ö–û–ú–ü–ê–ù–ò–ò**\n\n"
            f"–ö–æ–º–∞–Ω–¥–∞: {poem.team}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(poem.members)}\n\n"
            "üìã **–ü—Ä–∞–≤–∏–ª–∞:**\n"
            "1Ô∏è‚É£ –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–∏—à–µ—Ç –û–î–ù–£ —Å—Ç—Ä–æ–∫—É —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è\n"
            "2Ô∏è‚É£ –°—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏\n"
            "3Ô∏è‚É£ –í—ã —É–≤–∏–¥–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º —Å–≤–æ–µ–π\n"
            "4Ô∏è‚É£ –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∏—Ñ–º—É –∏ —Ä–∏—Ç–º\n"
            f"5Ô∏è‚É£ –£ –≤–∞—Å –µ—Å—Ç—å {self.response_timeout} –º–∏–Ω—É—Ç—ã –Ω–∞ –æ—Ç–≤–µ—Ç\n\n"
            "üîÑ **–ü–æ—Ä—è–¥–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for i, member in enumerate(poem.members, 1):
            status = "‚úÖ" if member.has_contributed else "‚è≥"
            instruction_text += f"{i}. {member.fio} {status}\n"

        instruction_text += "\nüí´ –£–¥–∞—á–∏ –≤ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ!"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        for member in poem.members:
            try:
                await self.bot.send_message(
                    member.chat_id,
                    instruction_text,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫—É {member.user_id}: {e}")

    async def _request_line_from_member(self, member: TeamMember, poem: TeamPoem):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ–º
            message_text = f"üñä **{member.fio}, –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!**\n\n"

            if poem.lines:
                message_text += poem.get_poem_text() + "\n"
            else:
                message_text += "–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!\n\n"

            message_text += (
                "‚úçÔ∏è **–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.**\n"
                "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º—ã—Å–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∏—Ñ–º—É.\n\n"
                f"‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å {self.response_timeout} –º–∏–Ω—É—Ç—ã –Ω–∞ –æ—Ç–≤–µ—Ç."
            )

            await self.bot.send_message(
                member.chat_id,
                message_text,
                parse_mode="Markdown"
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
            timer_task = asyncio.create_task(
                self._timeout_handler(member, poem)
            )
            self.active_timers[member.user_id] = timer_task

            logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.fio} (user_id: {member.user_id})")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–æ–∫–∏ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.user_id}: {e}")
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
            await self._process_next_member(poem)

    async def _timeout_handler(self, member: TeamMember, poem: TeamPoem):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        try:
            await asyncio.sleep(self.response_timeout * 60)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫
            if not member.has_contributed:
                logging.warning(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.fio} (user_id: {member.user_id})")

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—Å–∫ –≤ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
                poem.add_line(f"[–ü—Ä–æ–ø—É—â–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º {member.fio}]", member)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                try:
                    await self.bot.send_message(
                        member.chat_id,
                        "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –í–∞—à —Ö–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω.\n"
                        "–ü–µ—Ä–µ–¥–∞–µ–º —Å–ª–æ–≤–æ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.",
                        parse_mode="Markdown"
                    )
                except:
                    pass

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                await self._process_next_member(poem)

        except asyncio.CancelledError:
            logging.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.user_id} –æ—Ç–º–µ–Ω–µ–Ω")

    async def process_poem_line(self, message: types.Message, state: FSMContext) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Å—Ç—Ä–æ–∫–∏
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM

        Returns:
            bool: True –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
        """
        try:
            user_id = message.from_user.id

            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞
            team = self.user_to_team.get(user_id)
            if not team or team not in self.team_poems:
                await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.")
                return False

            poem = self.team_poems[team]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—á–µ—Ä–µ–¥—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            current_member = poem.get_current_member()
            if not current_member or current_member.user_id != user_id:
                await message.answer(
                    "‚è≥ –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞."
                )
                return False

            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
            if user_id in self.active_timers:
                self.active_timers[user_id].cancel()
                del self.active_timers[user_id]

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
            line_text = message.text.strip()
            poem.add_line(line_text, current_member)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self._save_contribution(poem.team, current_member, line_text, len(poem.lines))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.answer(
                "‚úÖ –í–∞—à–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ!\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥! üé≠"
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å—é –∫–æ–º–∞–Ω–¥—É –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            await self._notify_team_progress(poem, current_member)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
            await self._process_next_member(poem)

            return True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return False

    async def _process_next_member(self, poem: TeamPoem):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
            next_member = poem.get_current_member()

            if next_member:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —É —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                await self._request_line_from_member(next_member, poem)
            else:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
                await self._complete_team_poem(poem)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É: {e}")

    async def _complete_team_poem(self, poem: TeamPoem):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
        try:
            poem.status = PoemStatus.COMPLETED
            poem.completed_at = datetime.now()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            completion_text = (
                    "üéâ **–°–¢–ò–•–û–¢–í–û–†–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!**\n\n"
                    f"–ö–æ–º–∞–Ω–¥–∞ {poem.team} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∞ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ!\n\n"
                    + poem.get_poem_text() + "\n\n"
                                             "üëè **–ê–≤—Ç–æ—Ä—ã:**\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
            for member in poem.members:
                if member.has_contributed and member.contribution != "[–ü—Ä–æ–ø—É—â–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º":
                    completion_text += f"‚Ä¢ {member.fio}\n"

            completion_text += "\nüèÜ –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã
            for member in poem.members:
                try:
                    await self.bot.send_message(
                        member.chat_id,
                        completion_text,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫—É {member.user_id}: {e}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
            self._save_poem_state(poem)

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            del self.team_poems[poem.team]
            for member in poem.members:
                self.user_to_team.pop(member.user_id, None)

            logging.info(f"–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {poem.team} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è: {e}")

    async def _notify_team_progress(self, poem: TeamPoem, last_contributor: TeamMember):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è"""
        progress_text = (
            f"üìù **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è**\n\n"
            f"{last_contributor.fio} –¥–æ–±–∞–≤–∏–ª(–∞) —Å—Ç—Ä–æ–∫—É:\n"
            f"‚û°Ô∏è _{poem.lines[-1]}_\n\n"
            f"–°—Ç—Ä–æ–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ: {len(poem.lines)}/{len(poem.members)}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º, –∫—Ä–æ–º–µ –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
        for member in poem.members:
            if member.user_id != last_contributor.user_id:
                try:
                    await self.bot.send_message(
                        member.chat_id,
                        progress_text,
                        parse_mode="Markdown"
                    )
                except:
                    pass

    def _save_poem_state(self, poem: TeamPoem):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –≤ –ë–î"""
        try:
            poem_data = {
                'team': poem.team,
                'status': poem.status.value,
                'lines': poem.lines,
                'members': [
                    {
                        'user_id': m.user_id,
                        'fio': m.fio,
                        'has_contributed': m.has_contributed,
                        'contribution': m.contribution
                    }
                    for m in poem.members
                ],
                'current_member_index': poem.current_member_index
            }

            self.cur.execute("""
                INSERT OR REPLACE INTO team_poems 
                (team, status, poem_data, started_at, completed_at)
                VALUES (?, ?, ?, ?, ?)
            """, (
                poem.team,
                poem.status.value,
                json.dumps(poem_data, ensure_ascii=False),
                poem.started_at,
                poem.completed_at
            ))

            self.conn.commit()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è: {e}")

    def _save_contribution(self, team: str, member: TeamMember, line: str, line_number: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ –ë–î"""
        try:
            self.cur.execute("""
                             INSERT INTO poem_contributions
                                 (team, user_id, chat_id, fio, line_number, contribution)
                             VALUES (?, ?, ?, ?, ?, ?)
                             """, (team, member.user_id, member.chat_id, member.fio, line_number, line))

            self.conn.commit()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∞: {e}")

    async def check_and_start_poem_for_user(self, user_id: int, chat_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞

        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.cur.execute(
                "SELECT team FROM answers WHERE user_id = ? AND chat_id = ?",
                (user_id, chat_id)
            )
            result = self.cur.fetchone()

            if not result:
                return False

            team = result[0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
            if team not in self.team_poems:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ—à–ª–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞
                self.cur.execute("""
                                 SELECT COUNT(*)                                            as total,
                                        SUM(CASE WHEN current_block >= 5 THEN 1 ELSE 0 END) as ready
                                 FROM answers
                                 WHERE team = ?
                                 """, (team,))

                total, ready = self.cur.fetchone()

                # –ó–∞–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤—ã –∏–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                if ready == total or ready >= max(1, total * 0.7):  # 70% —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ—Ç–æ–≤—ã
                    await self.start_team_poem_block(team)
                    return True
                else:
                    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ {team}: {ready}/{total} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—é")

            return True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—é: {e}")
            return False

    def get_team_poem_stats(self, team: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã"""
        try:
            self.cur.execute("""
                             SELECT status, poem_data, started_at, completed_at
                             FROM team_poems
                             WHERE team = ?
                             ORDER BY created_at DESC LIMIT 1
                             """, (team,))

            result = self.cur.fetchone()
            if result:
                poem_data = json.loads(result[1])
                return {
                    'status': result[0],
                    'lines_count': len(poem_data.get('lines', [])),
                    'members_count': len(poem_data.get('members', [])),
                    'started_at': result[2],
                    'completed_at': result[3],
                    'lines': poem_data.get('lines', [])
                }

            return None

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
